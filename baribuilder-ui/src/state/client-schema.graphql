##// Defines what we can query on the GraphQL client store
##
##// TODO this typeDefs feature is broken. It is only used for
##// introspection, not validation, and the introspection breaks in GraphiQL (but is still useful for apollo CLI)
##// for weird reasons: https://github.com/apollographql/apollo-client-devtools/issues/132
##
##// Don't forget to include __typename in GraphiQL: https://github.com/apollographql/apollo-link-state/issues/239
##
##// apollo-link-state docs: https://www.apollographql.com/docs/link/links/state.html
##// local state docs: https://www.apollographql.com/docs/react/essentials/local-state.html
##export const typeDefs = `
#
#// Don't forget to include __typename in GraphiQL: https://github.com/apollographql/apollo-link-state/issues/239
#
#// apollo-link-state docs: https://www.apollographql.com/docs/link/links/state.html
#// local state docs: https://www.apollographql.com/docs/react/essentials/local-state.html


##### Augmenting product with local information

# This already exists remotely, but doesn't get downloaded because it's not used remotely (yet)
enum FREQUENCY {
    DAILY
    WEEKLY
    MONTHLY
}

extend type Product {
    cost: Cost!
    projectedRegimenCost: RegimenCost!
    defaultQuantity: ProductQuantity!
    matchScore: Float!
}

enum PRODUCT_QUANTITY_UNITS {
    SERVINGS
}

type Cost {
    money: Float!
    frequency: FREQUENCY!
}

type RegimenCost {
    numRemainingProducts: Int!
    cost: Cost!
}

type ProductQuantity {
    number: Int!
    units: PRODUCT_QUANTITY_UNITS!
    frequency: FREQUENCY!
}

##### Local state storage (matches client-schema-types.ts); hopefully we can generate that sometime

type Regimen {
    products: [RegimenProduct!]!
}

type RegimenProduct {
    id: ID!
    quantity: ProductQuantity!
}

type DesiredIngredients {
    ingredientRanges: [IngredientRange!]!
}

type IngredientRange {
    ingredientType: IngredientType!
    minimumDosage: Dosage
    maximumDosage: Dosage
    units: INGREDIENT_UNITS!
    frequency: FREQUENCY!
}

type Dosage {
    number: Float!
    units: INGREDIENT_UNITS!
}

##### Queries and Mutations for local state

extend type Query {
    desiredIngredients: DesiredIngredients
    currentRegimen: Regimen
}
