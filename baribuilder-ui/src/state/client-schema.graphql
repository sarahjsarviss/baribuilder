##// Defines what we can query on the GraphQL client store
##
##// TODO typeDefs feature is broken. It is only used for
##// introspection, not validation, and the introspection breaks in GraphiQL (but is still useful for apollo CLI)
##// for weird reasons: https://github.com/apollographql/apollo-client-devtools/issues/132
##
##// Don't forget to include __typename in GraphiQL: https://github.com/apollographql/apollo-link-state/issues/239
##
##// apollo-link-state docs: https://www.apollographql.com/docs/link/links/state.html
##// local state docs: https://www.apollographql.com/docs/react/essentials/local-state.html


##### These enums already exist remotely, but don't get downloaded (because not used remotely yet?)

enum FREQUENCY {
    DAILY
    WEEKLY
    MONTHLY
}

enum PRODUCT_QUANTITY_UNITS {
    SERVINGS
}

##### Local state storage (matches client-schema-types.ts); hopefully we can generate that sometime

type ClientCatalogProduct {
    catalogProductId: ID!
    cost: CatalogProductCost!
    projectedRegimenCost: RegimenCost
    quantity: CatalogProductQuantity!
    matchScore: Float!
}

type CatalogProductCost {
    money: Float!
    frequency: FREQUENCY!
}

type RegimenCost {
    numRemainingProducts: Int!
    frequency: FREQUENCY!
    money: Float!
}

type CatalogProductQuantity {
    amount: Int!
    units: PRODUCT_QUANTITY_UNITS!
    frequency: FREQUENCY!
}

type Regimen {
    products: [RegimenProduct!]!
}

type RegimenProduct {
    catalogProductId: ID!
    quantity: RegimenProductQuantity!
    cost: RegimenProductCost!
}

type RegimenProductQuantity {
    amount: Int!
    units: PRODUCT_QUANTITY_UNITS!
    frequency: FREQUENCY!
}

type RegimenProductCost {
    money: Float!
    frequency: FREQUENCY!
}

type DesiredIngredients {
    ingredientRanges: [IngredientRange!]!
}

type IngredientRange {
    ingredientTypeName: String!
    minimum: RangeIngredientQuantity
    maximum: RangeIngredientQuantity
    frequency: FREQUENCY!
}

type RangeIngredientQuantity {
    amount: Float!
    units: INGREDIENT_QUANTITY_UNITS!
}

union ProductCost = RegimenProductCost | CatalogProductCost

##### Queries and Mutations for local state

extend type Query {
    allClientCatalogProducts: [ClientCatalogProduct!]!
    ClientCatalogProduct(catalogProductId: ID!): ClientCatalogProduct
    desiredIngredients: DesiredIngredients!
    currentRegimen: Regimen!
}

extend type Mutation {
    AddProductToCurrentRegimen(catalogProductId: ID!, amount: Int!, frequency: FREQUENCY!, units: PRODUCT_QUANTITY_UNITS!): RegimenProduct!
}