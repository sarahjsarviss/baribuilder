##// Defines what we can query on the GraphQL client store
##
##// TODO typeDefs feature is broken. It is only used for
##// introspection, not validation, and the introspection breaks in GraphiQL (but is still useful for apollo CLI)
##// for weird reasons: https://github.com/apollographql/apollo-client-devtools/issues/132
##
##// Don't forget to include __typename in GraphiQL: https://github.com/apollographql/apollo-link-state/issues/239
##
##// apollo-link-state docs: https://www.apollographql.com/docs/link/links/state.html
##// local state docs: https://www.apollographql.com/docs/react/essentials/local-state.html


##### These enums already exist remotely, but don't get downloaded (because not used remotely yet?)

enum PRODUCT_QUANTITY_UNITS {
    SERVINGS
}

##### Local state storage (matches client-schema-types.ts); hopefully we can generate that sometime

type ClientCatalogProduct {
    catalogProductId: ID!
    cost: CatalogProductCost!
    projectedRegimenCost: RegimenCost
    defaultQuantity: CatalogProductQuantity!
    matchScore: Float!
}

type CatalogProductCost {
    money: Float!
    frequency: FREQUENCY!
}

type RegimenCost {
    frequency: FREQUENCY!
    money: Float!
}

type CatalogProductQuantity {
    amount: Int!
    units: PRODUCT_QUANTITY_UNITS!
    frequency: FREQUENCY!
    remainingUnfilledIngredientCount: Int
}

type Regimen {
    products: [RegimenProduct!]!
}

input RegimenInput {
    products: [RegimenProductInput!]!
}

type RegimenProduct {
    catalogProductId: ID!
    quantity: RegimenProductQuantity!
    cost: RegimenProductCost!
}

input RegimenProductInput {
    catalogProductId: ID!
    quantity: RegimenProductQuantityInput!
    cost: RegimenProductCostInput!
}

type RegimenProductQuantity {
    amount: Int!
    units: PRODUCT_QUANTITY_UNITS!
    frequency: FREQUENCY!
}

input RegimenProductQuantityInput {
    amount: Int!
    units: PRODUCT_QUANTITY_UNITS!
    frequency: FREQUENCY!
}

type RegimenProductCost {
    money: Float!
    frequency: FREQUENCY!
}

input RegimenProductCostInput {
    money: Float!
    frequency: FREQUENCY!
}

type GoalIngredients {
    ingredientRanges: [IngredientRange!]!
    unfilledIngredientCount: Int
}

input GoalIngredientsInput {
    ingredientRanges: [IngredientRangeInput!]!
}

type IngredientRange {
    ingredientTypeName: String!
    minimumAmount: Float
    maximumAmount: Float
    units: INGREDIENT_QUANTITY_UNITS!
    frequency: FREQUENCY!
}

input IngredientRangeInput {
    ingredientTypeName: String!
    minimumAmount: Float
    maximumAmount: Float
    units: INGREDIENT_QUANTITY_UNITS!
    frequency: FREQUENCY!
}

type SearchQuery {
    value: String!
}

##### Queries and Mutations for local state

extend type Query {
    allClientCatalogProducts(category: CATEGORY): [ClientCatalogProduct!]!
    ClientCatalogProduct(catalogProductId: ID!): ClientCatalogProduct
    goalIngredients: GoalIngredients!
    currentRegimen: Regimen!
    searchQuery: SearchQuery!
}

extend type Mutation {
    AddProductToCurrentRegimen(catalogProductId: ID!, amount: Int!, frequency: FREQUENCY!, units: PRODUCT_QUANTITY_UNITS!): Regimen!
    SetGoalIngredients(goalIngredients: GoalIngredientsInput!): GoalIngredients!
    SetCurrentRegimen(currentRegimen: RegimenInput!): Regimen!
    SetCurrentRegimenProductQuantity(catalogProductId: ID!, regimenProductQuantity: RegimenProductQuantityInput!): Regimen!
    DeleteCurrentRegimenProductQuantity(catalogProductId: ID!): Regimen!
    SetSearchQuery(searchQuery: String!): SearchQuery!
}